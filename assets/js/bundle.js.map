{"version":3,"sources":["webpack:///webpack/bootstrap","webpack:///./src/demo/textures/sun2.jpg","webpack:///./src/demo/textures/sun1.jpg","webpack:///./src/demo/shaders/star.vert","webpack:///./src/demo/shaders/star.frag","webpack:///./src/demo/resize-canvas.js","webpack:///./src/demo/create-shader.js","webpack:///./src/demo/create-program.js","webpack:///./src/demo/create-buffer.js","webpack:///./src/demo/draw.js","webpack:///./src/demo/textures.js","webpack:///./src/demo/index.js","webpack:///./src/index.js"],"names":["installedModules","__webpack_require__","moduleId","exports","module","i","l","modules","call","m","c","d","name","getter","o","Object","defineProperty","configurable","enumerable","get","r","value","n","__esModule","object","property","prototype","hasOwnProperty","p","s","resize_canvas","canvas","multiplier","width","clientWidth","height","clientHeight","create_shader","gl","sourceCode","type","shader","createShader","shaderSource","compileShader","getShaderParameter","COMPILE_STATUS","getShaderInfoLog","create_program","shaderData","program","createProgram","map","src","forEach","attachShader","linkProgram","create_buffer","geometryBuffer","createBuffer","bindBuffer","ARRAY_BUFFER","bufferData","Float32Array","STATIC_DRAW","demo_draw","draw","now","state","clear","COLOR_BUFFER_BIT","DEPTH_BUFFER_BIT","enableVertexAttribArray","attributes","position","vertexAttribPointer","FLOAT","uniform2f","uniforms","resolution","window","innerWidth","innerHeight","uniform1f","millis","iChannel0","textures","texture","iChannel1","texture2","coronaPower","powers","temperature","iTime","drawArrays","TRIANGLE_STRIP","requestAnimationFrame","loadTexture","url","createTexture","bindTexture","TEXTURE_2D","internalFormat","RGBA","srcFormat","srcType","UNSIGNED_BYTE","pixel","Uint8Array","texImage2D","image","Image","onload","isPowerOf2","generateMipmap","texParameteri","TEXTURE_WRAP_S","CLAMP_TO_EDGE","TEXTURE_WRAP_T","TEXTURE_MIN_FILTER","LINEAR","document","getElementById","getContext","shaders","star_default","a","FRAGMENT_SHADER","shaders_star_default","VERTEX_SHADER","getAttribLocation","brightness","getUniformLocation","useProgram","sun1_default","sun2_default","resize","viewport","onresize","addEventListener","src_demo"],"mappings":"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","file":"assets/js/bundle.js","sourcesContent":[" \t// The module cache\n \tvar installedModules = {};\n\n \t// The require function\n \tfunction __webpack_require__(moduleId) {\n\n \t\t// Check if module is in cache\n \t\tif(installedModules[moduleId]) {\n \t\t\treturn installedModules[moduleId].exports;\n \t\t}\n \t\t// Create a new module (and put it into the cache)\n \t\tvar module = installedModules[moduleId] = {\n \t\t\ti: moduleId,\n \t\t\tl: false,\n \t\t\texports: {}\n \t\t};\n\n \t\t// Execute the module function\n \t\tmodules[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n\n \t\t// Flag the module as loaded\n \t\tmodule.l = true;\n\n \t\t// Return the exports of the module\n \t\treturn module.exports;\n \t}\n\n\n \t// expose the modules object (__webpack_modules__)\n \t__webpack_require__.m = modules;\n\n \t// expose the module cache\n \t__webpack_require__.c = installedModules;\n\n \t// define getter function for harmony exports\n \t__webpack_require__.d = function(exports, name, getter) {\n \t\tif(!__webpack_require__.o(exports, name)) {\n \t\t\tObject.defineProperty(exports, name, {\n \t\t\t\tconfigurable: false,\n \t\t\t\tenumerable: true,\n \t\t\t\tget: getter\n \t\t\t});\n \t\t}\n \t};\n\n \t// define __esModule on exports\n \t__webpack_require__.r = function(exports) {\n \t\tObject.defineProperty(exports, '__esModule', { value: true });\n \t};\n\n \t// getDefaultExport function for compatibility with non-harmony modules\n \t__webpack_require__.n = function(module) {\n \t\tvar getter = module && module.__esModule ?\n \t\t\tfunction getDefault() { return module['default']; } :\n \t\t\tfunction getModuleExports() { return module; };\n \t\t__webpack_require__.d(getter, 'a', getter);\n \t\treturn getter;\n \t};\n\n \t// Object.prototype.hasOwnProperty.call\n \t__webpack_require__.o = function(object, property) { return Object.prototype.hasOwnProperty.call(object, property); };\n\n \t// __webpack_public_path__\n \t__webpack_require__.p = \"\";\n\n\n \t// Load entry module and return exports\n \treturn __webpack_require__(__webpack_require__.s = 4);\n","module.exports = __webpack_public_path__ + \"b76e0bae2da857f908aba3e94db2e083.jpg\";","module.exports = __webpack_public_path__ + \"7c712e8a25aacb4b0cacf47a19cdeaab.jpg\";","module.exports = \"attribute vec2 a_position;\\n\\nvoid main(void) {\\n  gl_Position = vec4(a_position, 0, 1);\\n}\\n\"","module.exports = \"// based on https://www.shadertoy.com/view/lsf3RH by\\n// trisomie21 (THANKS!)\\n// My apologies for the ugly code.\\n#ifdef GL_ES\\n  precision mediump float;\\n#endif\\nuniform float viewWidth;\\nuniform float viewHeight;\\n\\nuniform sampler2D tDiffuse;\\nuniform sampler2D tNoise;\\nuniform float iTime;\\nvarying vec2 vUv;\\nvarying vec2 IResolution;\\nuniform sampler2D iChannel1;\\nuniform sampler2D iChannel0;\\nvarying vec3 vPosition;\\nvarying vec3 vNormal;\\nuniform vec2 u_resolution;\\nuniform float u_millis;\\n\\nuniform float temperature;\\nuniform float coronaPower;\\n\\nfloat snoise(vec3 uv, float res)\\t// by trisomie21\\n{\\n\\tconst vec3 s = vec3(1e0, 1e2, 1e4);\\n\\n\\tuv *= res;\\n\\n\\tvec3 uv0 = floor(mod(uv, res))*s;\\n\\tvec3 uv1 = floor(mod(uv+vec3(1.), res))*s;\\n\\n\\tvec3 f = fract(uv); f = f*f*(3.0-2.0*f);\\n\\n\\tvec4 v = vec4(uv0.x+uv0.y+uv0.z, uv1.x+uv0.y+uv0.z,\\n\\t\\t      \\t  uv0.x+uv1.y+uv0.z, uv1.x+uv1.y+uv0.z);\\n\\n\\tvec4 r = fract(sin(v*1e-3)*1e5);\\n\\tfloat r0 = mix(mix(r.x, r.y, f.x), mix(r.z, r.w, f.x), f.y);\\n\\n\\tr = fract(sin((v + uv1.z - uv0.z)*1e-3)*1e5);\\n\\tfloat r1 = mix(mix(r.x, r.y, f.x), mix(r.z, r.w, f.x), f.y);\\n\\n\\treturn mix(r0, r1, f.z)*2.-1.;\\n}\\n\\nfloat freqs[4];\\n\\nvoid main()\\n{\\n\\tfreqs[0] = texture2D( iChannel1, vec2( 0.01, 0.25 ) ).x;\\n\\tfreqs[1] = texture2D( iChannel1, vec2( 0.07, 0.25 ) ).x;\\n\\tfreqs[2] = texture2D( iChannel1, vec2( 0.15, 0.25 ) ).x;\\n\\tfreqs[3] = texture2D( iChannel1, vec2( 0.30, 0.25 ) ).x;\\n\\n\\tfloat brightness\\t= freqs[1] * 0.25 + freqs[2] * 0.25;\\n\\tfloat radius\\t\\t= 0.24 + brightness * 0.2;\\n\\tfloat invRadius \\t= 1.0/radius;\\n\\n\\tvec3 orange\\t\\t\\t= vec3( (1.0 - temperature), temperature, temperature );\\n\\tvec3 orangeRed\\t\\t= vec3( 0.8, 0.35, 0.1 );\\n\\tfloat time\\t\\t= u_millis * 0.1;\\n\\tfloat aspect\\t= u_resolution.x/u_resolution.y;\\n\\tvec2 uv\\t\\t\\t= gl_FragCoord.xy / u_resolution.xy;\\n\\tvec2 p \\t\\t\\t= -0.5 + uv;\\n\\tp.x *= aspect;\\n\\n\\tfloat fade\\t\\t= pow( length( 2.0 * p ), 0.5 );\\n\\tfloat fVal1\\t\\t= 1.0 - fade;\\n\\tfloat fVal2\\t\\t= 1.0 - fade;\\n\\n\\tfloat angle\\t\\t= atan( p.x, p.y )/6.2832;\\n\\tfloat dist\\t\\t= length(p);\\n\\tvec3 coord\\t\\t= vec3( angle, dist, time * 0.1 );\\n\\n\\tfloat newTime1\\t= abs( snoise( coord + vec3( 0.0, -time * ( 0.35 + brightness * 0.001 ), time * 0.015 ), 15.0 ) );\\n\\tfloat newTime2\\t= abs( snoise( coord + vec3( 0.0, -time * ( 0.15 + brightness * 0.001 ), time * 0.015 ), 45.0 ) );\\n\\tfor( int i=1; i<=7; i++ ){\\n\\t\\tfloat power = pow( 2.0, float(i + 1) );\\n\\t\\tfVal1 += ( 0.5 / power ) * snoise( coord + vec3( 0.0, -time, time * 0.2 ), ( power * ( 10.0 ) * ( newTime1 + 1.0 ) ) );\\n\\t\\tfVal2 += ( 0.5 / power ) * snoise( coord + vec3( 0.0, -time, time * 0.2 ), ( power * ( 25.0 ) * ( newTime2 + 1.0 ) ) );\\n\\t}\\n\\n\\tfloat corona\\t\\t= pow( fVal1 * max( 1.1 - fade, 0.0 ), 2.0 ) * 50.0;\\n\\tcorona\\t\\t\\t\\t+= pow( fVal2 * max( 1.1 - fade, 0.0 ), 2.0 ) * 50.0;\\n\\tcorona\\t\\t\\t\\t*= 1.2 - newTime1;\\n\\tvec3 sphereNormal \\t= vec3( 0.0, 0.0, 1.0 );\\n\\tvec3 dir \\t\\t\\t= vec3( 0.0 );\\n\\tvec3 center\\t\\t\\t= vec3( 0.5, 0.5, 1.0 );\\n\\tvec3 starSphere\\t\\t= vec3( 0.0 );\\n\\n\\tvec2 sp = -1.0 + 2.0 * uv;\\n\\tsp.x *= aspect;\\n\\tsp *= ( 2.0 - brightness );\\n  \\tfloat r = dot(sp,sp);\\n\\tfloat f = (1.0-sqrt(abs(1.0-r)))/(r) + brightness * 0.5;\\n\\tif( dist < radius ){\\n\\t\\tcorona\\t\\t\\t*= pow( dist * invRadius, 24.0 );\\n  \\t\\tvec2 newUv;\\n \\t\\tnewUv.x = sp.x*f;\\n  \\t\\tnewUv.y = sp.y*f;\\n\\t\\tnewUv += vec2( time, 0.0 );\\n\\n\\t\\tvec3 texSample \\t= texture2D( iChannel0, newUv ).rgb;\\n\\t\\tfloat uOff\\t\\t= ( texSample.g * brightness * 4.5 + time );\\n\\t\\tvec2 starUV\\t\\t= newUv + vec2( uOff, 0.0 );\\n\\t\\tstarSphere\\t\\t= texture2D( iChannel0, starUV ).rgb;\\n\\t}\\n\\n\\tfloat starGlow\\t= min( max( 1.0 - dist * ( 1.0 - brightness ), 0.0 ), 1.0 );\\n\\t//fragColor.rgb\\t= vec3( r );\\n\\tgl_FragColor.rgb\\t= vec3( f * ( 0.75 + brightness * 0.3 ) * orange  ) + starSphere + corona * orange* coronaPower + starGlow * orangeRed * coronaPower;\\n\\tgl_FragColor.a\\t\\t= 1.0;\\n}\\n\"","const resizeCanvas = (canvas, multiplier) => {\n  multiplier = multiplier || 1;\n  var width  = canvas.clientWidth  * multiplier | 0;\n  var height = canvas.clientHeight * multiplier | 0;\n  if (canvas.width !== width ||  canvas.height !== height) {\n    canvas.width  = width;\n    canvas.height = height;\n    return true;\n  }\n  return false;\n};\n\nexport default resizeCanvas;\n","const createShader = (gl, sourceCode, type) => {\n  // Compiles either a shader of type gl.VERTEX_SHADER or gl.FRAGMENT_SHADER\n  var shader = gl.createShader( type );\n  gl.shaderSource( shader, sourceCode );\n  gl.compileShader( shader );\n\n  if ( !gl.getShaderParameter(shader, gl.COMPILE_STATUS) ) {\n    var info = gl.getShaderInfoLog(shader);\n    throw 'Could not compile WebGL program. \\n\\n' + info;\n  }\n  return shader;\n};\n\nexport default createShader;\n","import createShader from './create-shader';\n\nconst createProgram = (gl, shaderData) => {\n  const program = gl.createProgram();\n\n  const shaders = shaderData\n    .map(s => createShader(gl, s.src, s.type))\n    .forEach(s => gl.attachShader(program, s));\n\n  gl.linkProgram(program);\n\n  return program;\n};\n\nexport default createProgram;\n","const createBuffer = gl => {\n  // Create and initialize buffer\n  const geometryBuffer = gl.createBuffer();\n  gl.bindBuffer(gl.ARRAY_BUFFER, geometryBuffer);\n  gl.bufferData(gl.ARRAY_BUFFER, new Float32Array([\n    -1.0, -1.0,\n     1.0, -1.0,\n    -1.0,  1.0,\n     1.0,  1.0\n  ]), gl.STATIC_DRAW);\n\n  return geometryBuffer;\n}\n\nexport default createBuffer;\n","const draw = (gl, now, state) => {\n    gl.clear(gl.COLOR_BUFFER_BIT | gl.DEPTH_BUFFER_BIT);\n    gl.bindBuffer(gl.ARRAY_BUFFER, state.geometryBuffer);\n\n    gl.enableVertexAttribArray(state.attributes.position);\n    gl.vertexAttribPointer(state.attributes.position, 2, gl.FLOAT, false, 0, 0);\n    gl.uniform2f(state.uniforms.resolution, window.innerWidth, window.innerHeight);\n    gl.uniform1f(state.uniforms.millis, now / 1000);\n    gl.uniform1f(state.uniforms.iChannel0, state.textures.texture);\n    gl.uniform1f(state.uniforms.iChannel1, state.textures.texture2);\n\n    gl.uniform1f(state.uniforms.coronaPower, state.powers.coronaPower);\n    gl.uniform1f(state.uniforms.temperature, state.powers.temperature);\n\n    gl.uniform1f(state.uniforms.iTime, now);\n\n    gl.drawArrays(gl.TRIANGLE_STRIP, 0, 4);\n\n    requestAnimationFrame(now => draw(gl, now, state));\n};\n\n\n\n\nexport default draw;\n","//\n// Initialize a texture and load an image.\n// When the image finished loading copy it into the texture.\n//\nexport function loadTexture(gl, url) {\n    const texture = gl.createTexture();\n    gl.bindTexture(gl.TEXTURE_2D, texture);\n\n    // Because images have to be download over the internet\n    // they might take a moment until they are ready.\n    // Until then put a single pixel in the texture so we can\n    // use it immediately. When the image has finished downloading\n    // we'll update the texture with the contents of the image.\n    const level = 0;\n    const internalFormat = gl.RGBA;\n    const width = 1;\n    const height = 1;\n    const border = 0;\n    const srcFormat = gl.RGBA;\n    const srcType = gl.UNSIGNED_BYTE;\n    const pixel = new Uint8Array([0, 0, 255, 255]);  // opaque blue\n    gl.texImage2D(gl.TEXTURE_2D, level, internalFormat,\n        width, height, border, srcFormat, srcType,\n        pixel);\n\n    const image = new Image();\n    image.onload = function() {\n        gl.bindTexture(gl.TEXTURE_2D, texture);\n        gl.texImage2D(gl.TEXTURE_2D, level, internalFormat,\n            srcFormat, srcType, image);\n\n        // WebGL1 has different requirements for power of 2 images\n        // vs non power of 2 images so check if the image is a\n        // power of 2 in both dimensions.\n        if (isPowerOf2(image.width) && isPowerOf2(image.height)) {\n            // Yes, it's a power of 2. Generate mips.\n            gl.generateMipmap(gl.TEXTURE_2D);\n        } else {\n            // No, it's not a power of 2. Turn of mips and set\n            // wrapping to clamp to edge\n            gl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_WRAP_S, gl.CLAMP_TO_EDGE);\n            gl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_WRAP_T, gl.CLAMP_TO_EDGE);\n            gl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_MIN_FILTER, gl.LINEAR);\n        }\n    };\n    image.src = url;\n\n    return texture;\n}\n\nfunction isPowerOf2(value) {\n    return (value & (value - 1)) == 0;\n}\n","// This demo is from an anonymous Codepen.\n// It has been modified to stop it having dependencies\n// and been split up into seperate files.\n// This is probably not a good resource to learn\n// from as it has not been well thought out!\n// https://codepen.io/anon/pen/EQLERV\n\nimport fragmentShaderSrc from './shaders/star.frag';\nimport vertexShaderSrc from './shaders/star.vert';\nimport resizeCanvas from './resize-canvas';\nimport createProgram from './create-program';\nimport createBuffer from './create-buffer';\nimport draw from './draw';\nimport { loadTexture } from \"./textures\";\nimport img1 from \"./textures/sun1.jpg\";\nimport img2 from \"./textures/sun2.jpg\";\nconst demo = () => {\n    // Create program\n    const canvas = document.getElementById('canvas');\n    const gl = canvas.getContext('webgl');\n\n    const shaders = [\n        { src: fragmentShaderSrc, type: gl.FRAGMENT_SHADER },\n        { src: vertexShaderSrc, type: gl.VERTEX_SHADER }\n    ];\n\n    const program = createProgram(gl, shaders);\n\n    const geometryBuffer = createBuffer(gl);\n\n    // Set up attributes and uniforms\n    const attributes = {\n        position: gl.getAttribLocation(program, 'a_position'),\n        brightness: gl.getAttribLocation(program, 'a_brightness')\n    };\n\n    const uniforms = {\n        resolution: gl.getUniformLocation(program, 'u_resolution'),\n        iTime: gl.getUniformLocation(program, 'iTime'),\n        coronaPower: gl.getUniformLocation(program, 'coronaPower'),\n        temperature: gl.getUniformLocation(program, 'temperature'),\n        millis: gl.getUniformLocation(program, 'u_millis'),\n        iChannel0: gl.getUniformLocation(program, 'iChannel0'),\n        iChannel1: gl.getUniformLocation(program, 'iChannel1')\n    };\n\n    // Set WebGL program here (we have only one)\n    gl.useProgram(program);\n\n    let powers = {\n        coronaPower: 0.05,\n        temperature: 0.0\n    };\n\n    let texture = loadTexture(gl,img1);\n    let texture2 = loadTexture(gl,img2);\n\n\n    // Resize canvas and viewport\n    const resize = () => {\n        resizeCanvas(gl.canvas);\n        gl.viewport(0, 0, gl.canvas.width, gl.canvas.height);\n    };\n\n    // Setup canvas\n    window.onresize = resize;\n    resize();\n\n\n\n\n    document.getElementById(\"brightness\").addEventListener(\"click\", () => {\n        powers.coronaPower +=0.05;\n    });\n\n    document.getElementById(\"temperature\").addEventListener(\"click\", () => {\n        powers.temperature +=0.05;\n    });\n\n    // Start rendering\n    requestAnimationFrame(now => draw(gl, now, {\n        geometryBuffer,\n        attributes,\n        uniforms,\n        textures: {\n            texture: texture,\n            texture2: texture2\n        },\n        powers: powers\n    }));\n}\n\nexport default demo;\n","import demo from './demo';\n\ndemo();\n"],"sourceRoot":""}